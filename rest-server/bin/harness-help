#!/usr/bin/env bash

. "${HARNESS_HOME}/bin/harness-env"

echo -e "   ${CYAN}harness start${NC}"
echo -e "       Starts the Harness server and prints configuration information. Starts all active engines."
echo ""

echo -e "   ${CYAN}harness stop${NC}"
echo -e "       Gracefully stops harness and all engines."
echo ""

echo -e "   ${CYAN}harness add [-c <some-engine.json> | <some-resource-id>]${NC}"
echo -e "       Create a new engine and set it's configuration"
echo ""

echo -e "   ${CYAN}harness update [-c <some-engine.json> | <some-resource-id>] [-d | --data-delete] [-f | --force]${NC}"
echo -e "       Stops the engine, modifies the parameters and restarts the engine. WARNING: non-operational, instead perform harness delete then add"
echo ""

echo -e "   ${CYAN}harness delete [-c <some-engine.json> | <some-resource-id>]${NC}"
echo -e "       Deletes engine and all data"
echo ""

echo -e "   ${CYAN}harness import [-c <some-engine.json> | <some-resource-id>] [-i <some-directory> | <some-file>] ${NC}"
echo -e "       Import JSON events, just as they would have been sent as input. Used to replay mirrored data or import bootstrap data."
echo ""

echo -e "   ${CYAN}harness train [-c <some-engine.json> | <some-resource-id>]${NC}"
echo -e "       In the Lambda model this trains the algorithm on all previously accumulated data. WARNING: non-operational."
echo ""

echo -e "   ${CYAN}harness status [[-c <some-engine.json> | <some-resource-id>]]${NC}"
echo -e "       Prints a status message for harness or for the engine specified. Note: prints only server status."
echo ""
